{"version":3,"sources":["algorithms/dfs.js","algorithms/astar.js","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["ret","Node","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","fValue","gValue","react_default","a","createElement","id","concat","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","_step2","nodes","_iterator2","_createForOfIteratorHelper","s","n","done","_step3","value","_iterator3","node","push","err","e","f","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","_step","_iterator","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","dfs","dfs_createForOfIteratorHelper","dfsRecurse","astar","Math","abs","astarRecurse","curNode","nodesToSearch","_i","_neighbors","prevNodes","prevNode","nextNode","PathfindingVisualizer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mouseIsPressed","animating","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","_this2","_loop","i","setTimeout","animateShortestPath","v","document","getElementById","_ret","_this3","_loop2","_ret2","_this4","_loop3","_ret3","_this5","_loop4","enableButtons","disableButtons","animateDijkstra","animateDFS","animateAstar","clearBoardBtn","clearColorBtn","dijkstraBtn","dfsBtn","disabled","j","_this6","_this$state","Fragment","onClick","visualizeDijkstra","visualizeDFS","visualizeAstar","clearColors","clearBoard","map","rowIdx","key","nodeIdx","Node_Node_Node","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","objectSpread","App","PathfindingVisualizer_PathfindingVisualizer_PathfindingVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.60b61790.chunk.js","sourcesContent":["var ret;\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  ret = false;\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  sortNodesByDistance(unvisitedNodes);\r\n  const closestNode = unvisitedNodes.shift();\r\n  dfsRecurse(grid, closestNode, visitedNodesInOrder, finishNode);\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction dfsRecurse(grid, node, visitedNodesInOrder, finishNode){\r\n  const {col, row} = node;\r\n  if(ret === true) return;\r\n  if (node.isWall) return;\r\n  node.isVisited = true;\r\n  visitedNodesInOrder.push(node);\r\n  if(node === finishNode){\r\n    ret = true;\r\n    return;\r\n  }\r\n  if(row < grid.length - 1){\r\n    if(grid[row + 1][col].isVisited === false){\r\n      dfsRecurse(grid, grid[row + 1][col], visitedNodesInOrder, finishNode);\r\n      if(ret === true){\r\n        grid[row + 1][col].previousNode = node;\r\n      }\r\n    }\r\n  }\r\n  if(col < grid[0].length - 1){\r\n    if(grid[row][col + 1].isVisited === false){\r\n      dfsRecurse(grid, grid[row][col + 1], visitedNodesInOrder, finishNode);\r\n      if(ret === true){\r\n        grid[row][col + 1].previousNode = node;\r\n      }\r\n    }\r\n  }\r\n  if(row > 0){\r\n    if(grid[row-1][col].isVisited === false){\r\n      dfsRecurse(grid, grid[row-1][col], visitedNodesInOrder, finishNode);\r\n      if(ret === true){\r\n        grid[row-1][col].previousNode = node;\r\n      }\r\n    }\r\n  }\r\n  if(col > 0){\r\n    if(grid[row][col-1].isVisited === false){\r\n      dfsRecurse(grid, grid[row][col-1], visitedNodesInOrder, finishNode);\r\n      if(ret === true){\r\n        grid[row][col-1].previousNode = node;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}","var ret;\r\n\r\nexport function astar(grid, startNode, finishNode)\r\n{\r\n    ret = false\r\n    const visitedNodesInOrder = [];\r\n    const nodesToSearch = [];\r\n    startNode.gValue = 0;\r\n    startNode.fValue = (Math.abs(startNode.row - finishNode.row) + Math.abs(startNode.col - finishNode.col));\r\n    astarRecurse(startNode, grid, finishNode, visitedNodesInOrder, nodesToSearch);\r\n    return visitedNodesInOrder;\r\n}\r\n\r\nfunction astarRecurse(curNode, grid, finishNode, visitedNodesInOrder, nodesToSearch)\r\n{\r\n    if(ret === true) return;\r\n    const {col, row, gValue, fValue} = curNode;\r\n    if(curNode.isVisited === true) return;\r\n    if(curNode.isWall === true) return;\r\n\r\n    visitedNodesInOrder.push(curNode);\r\n    curNode.isVisited = true;\r\n\r\n    if(curNode === finishNode){\r\n        ret = true;\r\n        return;\r\n    }\r\n    \r\n    const neighbors = [];\r\n\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n    for(const neighbor of neighbors){\r\n        if(neighbor.isVisited === true || neighbor.isWall === true ) continue;\r\n        neighbor.gValue = gValue + 1;\r\n        neighbor.fValue = neighbor.gValue + (Math.abs(neighbor.row - finishNode.row ) + Math.abs(neighbor.col - finishNode.col));\r\n\r\n        const prevNodes = [];\r\n        if (neighbor.row > 0) prevNodes.push(grid[neighbor.row - 1][neighbor.col]);\r\n        if (neighbor.row < grid.length - 1) prevNodes.push(grid[neighbor.row + 1][neighbor.col]);\r\n        if (neighbor.col > 0) prevNodes.push(grid[neighbor.row][neighbor.col - 1]);\r\n        if (neighbor.col < grid[0].length - 1) prevNodes.push(grid[neighbor.row][neighbor.col + 1]);\r\n        prevNodes.filter(prevNode => prevNode.isVisited);\r\n        prevNodes.sort((nodeA, nodeB) => nodeA.gValue - nodeB.gValue);\r\n        neighbor.previousNode = prevNodes.shift();\r\n\r\n        nodesToSearch.unshift(neighbor);\r\n    }\r\n    nodesToSearch.sort((nodeA, nodeB) => nodeA.fValue - nodeB.fValue);\r\n\r\n    while(nodesToSearch.length > 0){\r\n        const nextNode = nodesToSearch.shift();\r\n        astarRecurse(nextNode, grid, finishNode, visitedNodesInOrder, nodesToSearch);\r\n        if(ret === true){\r\n            return;\r\n        }\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      fValue,\r\n      gValue,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n\r\n      if (closestNode.isWall) continue;\r\n\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {astar} from '../algorithms/astar';\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      animating: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.animating) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  \r\n  handleMouseEnter(row, col) {\r\n    if (this.state.animating) return;\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (this.state.animating) return;\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateDFS(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n          if(i === nodesInShortestPathOrder.length - 1){\r\n            this.enableButtons();\r\n            this.setState({animating: false});\r\n          }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    this.disableButtons();\r\n    this.setState({animating: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    this.disableButtons();\r\n    this.setState({animating: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDFS(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeAstar(){\r\n    this.disableButtons();\r\n    this.setState({animating: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  disableButtons(){\r\n    var clearBoardBtn = document.getElementById('clearBoard');\r\n    var clearColorBtn = document.getElementById('clearColors');\r\n    var dijkstraBtn = document.getElementById('dijkstra');\r\n    var dfsBtn = document.getElementById('dfs');\r\n    var astarBtn = document.getElementById('astar');\r\n\r\n    astarBtn.disabled = true;\r\n    dfsBtn.disabled = true;\r\n    clearBoardBtn.disabled = true;\r\n    clearColorBtn.disabled = true;\r\n    dijkstraBtn.disabled = true;\r\n  }\r\n\r\n  enableButtons(){\r\n    var clearBoardBtn = document.getElementById('clearBoard');\r\n    var clearColorBtn = document.getElementById('clearColors');\r\n    var dijkstraBtn = document.getElementById('dijkstra');\r\n    var dfsBtn = document.getElementById('dfs');\r\n    var astarBtn = document.getElementById('astar');\r\n\r\n    astarBtn.disabled = false;\r\n    dfsBtn.disabled = false;\r\n    clearBoardBtn.disabled = false;\r\n    clearColorBtn.disabled = false;\r\n    dijkstraBtn.disabled = false;\r\n  }\r\n\r\n  clearColors(){\r\n    const newGrid = this.state.grid;\r\n    for(let i = 0; i < newGrid.length; i++){\r\n      for(let j = 0; j < newGrid[i].length; j++){\r\n        newGrid[i][j].previousNode = null;\r\n        newGrid[i][j].distance = Infinity;\r\n        newGrid[i][j].isVisited = false;\r\n        document.getElementById(`node-${i}-${j}`).className = 'node ';\r\n        if(this.state.grid[i][j].isWall === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\r\n        }\r\n        if(i === START_NODE_ROW && j === START_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-start';\r\n        }\r\n        if(i === FINISH_NODE_ROW && j === FINISH_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-finish';\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: newGrid});\r\n    \r\n  }\r\n\r\n  clearBoard(){\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n    \r\n    for(let i = 0; i < this.state.grid.length; i++){\r\n      for(let j = 0; j < this.state.grid[i].length; j++){\r\n        document.getElementById(`node-${i}-${j}`).className = 'node ';\r\n        if(this.state.grid[i][j].isWall === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\r\n        }\r\n        if(i === START_NODE_ROW && j === START_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-start';\r\n        }\r\n        if(i === FINISH_NODE_ROW && j === FINISH_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-finish';\r\n        }\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className=\"button\">\r\n        \r\n      </div>\r\n      <div className=\"grid\">\r\n      <button id = \"dijkstra\" onClick={() => this.visualizeDijkstra()}>\r\n            Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button id = \"dfs\" onClick={() => this.visualizeDFS()}>\r\n            Visualize Depth First Search Algorithm\r\n        </button>\r\n        <button id = \"astar\" onClick={() => this.visualizeAstar()}>\r\n            Visualize A-Star Algorithm\r\n        </button>\r\n      <button id = \"clearColors\" onClick={() => this.clearColors()}>\r\n            Clear Colors\r\n        </button>\r\n      <button id = \"clearBoard\" onClick={() => this.clearBoard()}>\r\n            Clear Board\r\n      </button>\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    fValue: Infinity,\r\n    gValue: Infinity,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n\r\n  const newNode = {\r\n    ...node,\r\n    isWall: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}